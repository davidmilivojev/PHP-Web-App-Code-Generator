<?php

 	require_once "Rest.php";
        {% for entity in ent.entities %}
        require_once '../lib/DAL/{{entity.name}}DAL.php';
        {% endfor %}
        require_once '../lib/DAL/KorisnikDAL.php';


	class API extends REST
        {

            public function __construct() {
                parent::__construct();
            }

            public function processApi() {
                $func = strtolower(trim(str_replace("/", "", $_REQUEST['x'])));
                if ((int) method_exists($this, $func) > 0)
                    $this->$func();
                else
                    $this->response('false', 404);
            }

            public function json($data) {
                if (is_array($data)) {
                    return json_encode($data);
                }
            }


            {% for enty in ent.entities %}
            {% for ser in enty.services %}
            {% for ap in ser.actions %}
            {% if ap.meths.ga %}

            private function {{ap.name}}() {

                if ($this->get_request_method() != "GET")
                    $this->response('false', 406);

                ${{enty.name|lower}}DAL = new {{enty.name}}DAL();
                ${{ap.name}} = ${{enty.name|lower}}DAL->{% if ap.meths.ga %}GetAll{% endif %}();
                $this->response($this->json(${{ap.name}}), 200);
            }
            {% endif %}
            {% endfor %}
            {% endfor %}
            {% endfor %}


            {% for enty in ent.entities %}
            {% for ser in enty.services %}
            {% for ap in ser.actions %}
            {% if ap.meths.de %}
            private function {{ap.name}}() {
                if ($this->get_request_method() != "POST") {
                    $this->response('false', 406);
                }

                ${{enty.name|lower}} = new {{enty.name|capitalize}}();
                ${{enty.name|lower}}->set_{% for property in enty.properties %}{% if property.key %}{{property.name}}{% endif %}{% endfor %}((int) $this->_request['id']);
                ${{enty.name|lower}}DAL = new {{enty.name|capitalize}}DAL();
                $succ = ${{enty.name|lower}}DAL->DeleteOne(${{enty.name|lower}});
                if (!$succ) $this->response('false', 204);
                else $this->response('true', 200);
            }

            {% endif %}
            {% endfor %}
            {% endfor %}
            {% endfor %}

            {% for enty in ent.entities %}
            {% for ser in enty.services %}
            {% for ap in ser.actions %}
            {% if ap.meths.ad %}
            private function {{ap.name}}() {
                if ($this->get_request_method() != "POST") {
                    $this->response('false', 406);
                }

                ${{enty.name|lower}} = new {{enty.name|capitalize}}();
                {% for property in enty.properties %}
                {% if not property.key and not property.addlink %}
                ${{enty.name|lower}}->set_{{property.name}}((string) $this->_request['{{property.name|capitalize}}']);
                {% endif %}
                {% endfor %}
                {% for property in enty.properties %}
                {% if property.addlink %}
                ${{property.linkname.name|lower}}DAL = new {{property.linkname.name|capitalize}}DAL();
                ${{enty.name|lower}}->set_{{property.linkname.name|lower}}(${{property.linkname.name|lower}}DAL->GetOne((int) $this->_request['{{property.linkname.name|capitalize}}']));
                {% endif %}
                {% endfor %}

                ${{enty.name|lower}}DAL = new {{enty.name|capitalize}}DAL();
                $succ = ${{enty.name|lower}}DAL->AddOne(${{enty.name|lower}});
                if (!$succ) $this->response('false', 204);
                else $this->response('true', 200);
            }
            {% endif %}
            {% endfor %}
            {% endfor %}
            {% endfor %}


            {% for enty in ent.entities %}
            {% for ser in enty.services %}
            {% for ap in ser.actions %}
            {% if ap.meths.ed %}
            private function {{ap.name}}() {
                if ($this->get_request_method() != "POST") {
                    $this->response('false', 406);
                }

                ${{enty.name|lower}} = new {{enty.name|capitalize}}();
                {% for property in enty.properties %}
                {% if property.key %}
                ${{enty.name|lower}}->set_{{property.name}}((int) $this->_request['id']);
                {% else %}
                {% if not property.addlink %}
                ${{enty.name|lower}}->set_{{property.name}}((string) $this->_request['{{property.name|capitalize}}']);
                {% endif %}
                {% endif %}
                {% endfor %}
                {% for property in enty.properties %}
                {% if property.addlink %}
                ${{property.linkname.name|lower}}DAL = new {{property.linkname.name|capitalize}}DAL();
                ${{enty.name|lower}}->set_{{property.linkname.name|lower}}(${{property.linkname.name|lower}}DAL->GetOne((int) $this->_request['{{property.linkname.name|capitalize}}']));
                {% endif %}
                {% endfor %}

                ${{enty.name|lower}}DAL = new {{enty.name|capitalize}}DAL();
                $succ = ${{enty.name|lower}}DAL->EditOne(${{enty.name|lower}});
                if (!$succ) $this->response('false', 204);
                else $this->response('true', 200);
            }
            {% endif %}
            {% endfor %}
            {% endfor %}
            {% endfor %}

            {% for enty in ent.entities %}
            {% for ser in enty.services %}
            {% for ap in ser.actions %}
            {% if ap.meths.custom %}

            private function {{ap.name}}() {

                if ($this->get_request_method() != "GET")
                    $this->response('false', 406);

                $search = (string) $this->_request['search'];
                ${{enty.name|lower}}DAL = new {{enty.name}}DAL();
                ${{ap.name}} = ${{enty.name|lower}}DAL->{% if ap.meths.custom %}{{ap.meths.name}}{% endif %}($search);
                $this->response($this->json(${{ap.name}}), 200);
            }
            {% endif %}
            {% endfor %}
            {% endfor %}
            {% endfor %}

            {% for enty in ent.entities %}
            {% for ser in enty.services %}
            {% for ap in ser.actions %}
            {% if ap.meths.go %}
            private function {{ap.name}}() {

                if ($this->get_request_method() != "GET") {
                    $this->response('false', 406);
                }

                ${% for prop in enty.properties %}{% if prop.key %}{{prop.name}}{% endif %}{% endfor %} = (int) $this->_request['{% for prop in enty.properties %}{% if prop.key %}{{prop.name}}{% endif %}{% endfor %}'];
                if (${% for prop in enty.properties %}{% if prop.key %}{{prop.name}}{% endif %}{% endfor %} > 0) {
                    ${{enty.name|lower}}DAL = new {{enty.name}}DAL();
                    ${{enty.name|lower}} = ${{enty.name|lower}}DAL->{% if ap.meths.go %}GetOne{% endif %}(${% for prop in enty.properties %}{% if prop.key %}{{prop.name}}{% endif %}{% endfor %});
                    $result = array();
                    array_push($result, ${{enty.name|lower}});
                    $this->response($this->json($result), 200);
                }
                $this->response('false', 204);
            }
            {% endif %}
            {% endfor %}
            {% endfor %}
            {% endfor %}

            // DefaultUser(display/login/logout)

            private function kreirajnalog()
            {
                if ($this->get_request_method() != "POST") {
                    $this->response('false', 406);
                }

                $korisnik = new Korisnik();
                $korisnik->set_username((string) $this->_request['username']);
                $korisnik->set_password((string) $this->_request['password']);
                $korisnik->set_email((string) $this->_request['email']);

                $korisnikDAL = new KorisnikDAL();

                $succ = $korisnikDAL->AddOne($korisnik);
                if (!$succ) $this->response('false', 204);
                else $this->response('true', 200);
            }

            private function login()
            {
                if ($this->get_request_method() != "POST") {
                    $this->response('false', 406);
                }

                $username = (string) $this->_request['username'];
                $password = (string) $this->_request['password'];

                $korisnikDAL = new KorisnikDAL();
                $korisnik = $korisnikDAL->PronadjiKorisnika($username, $password);

                $result = array();
                if ($korisnik->get_idKorisnik()>0)
                {
                    array_push($result, $korisnik->get_username());
                    array_push($result, true);
                }
                else array_push($result, false);
                $this->response($this->json($result), 200);

            }

            private function getuserdata()
            {

              if ($this->get_request_method() != "GET") {
                  $this->response('false', 406);
              }


              $username = (string) $this->_request['usr'];

              $korisnikDAL = new KorisnikDAL();

              $userdata = $korisnikDAL->GetOne($username);
              $result = array();
              array_push($result, $userdata);
              $this->response($this->json($result), 200);
            }



          }



	$api = new API;
	$api->processApi();
?>
